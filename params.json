{
  "name": "Statechart-visualizer",
  "tagline": "Display statecharts properly from a yaml or a statechart object from sismic",
  "body": "# Statechart Visualizer\r\nDisplay statecharts properly from a yaml or a statechart object from Sismic.\r\n\r\n## Introduction\r\nThis module for pyhton 3 is initially planned to display statecharts from sismic but you can\r\neasily use it to create directly your own statecharts and display them. The purpose of the\r\nproject is display statecharts properly and add constraints (like *state 1 must be left to state2*)\r\non the states.\r\n\r\nYou can then export your statechart as svg file.\r\n\r\n## Requirements\r\nYou will find here the list of modules needed to use it (for python 3):\r\n\r\n- [Sismic](https://github.com/AlexandreDecan/sismic)\r\n- [Cassowary](https://github.com/pybee/cassowary)\r\n- [svgwrite](https://github.com/biazzotto/svgwrite)\r\n\r\n## Interactive mode\r\nYou can test the module interactively from a simple yaml file (representing\r\na statechart) following this way :\r\n```\r\npython main.py <your-file.yaml>\r\n```\r\n\r\nEach action will create (or update) a svg file with the name of the statechart.\r\nFor more informations about the actions you are able to do with this program, type simply `help` while \r\nmain.py is launched.\r\nNote that the syntax of the yaml file to represent a statechart is specified in the [sismic documentation](http://sismic.readthedocs.io/en/master/format.html#defining-statecharts-in-yaml).\r\n\r\n## Usage\r\n\r\nLet assume that you have created a statechart object with Sismic. You can create a svg file from this statechart.\r\n\r\n1. Create a RootBox with this statechart.\r\n2. Export this RootBox to a svg file.\r\n\r\n```\r\nfrom structures.box_elements import RootBox\r\nbox = RootBox(statechart)\r\nsvgwriter.export(box)\r\n```\r\nUsing the constraint solver (using the cassowary alogorithm), the boxes representing the states will be arranged\r\nfollowing the text on the transtitions and alternatively following a horizontal axis and a vertical axis.\r\nAfter that, the transitions will be drawn minimizing intersections with boxes, text and other transitions.\r\n\r\nIf the arrangement doesn't suit you, you can add mannualy constraint on the boxes with the method `box.add_constraint`.\r\nIf you don't want to display the entire text on transitions, you can hide a part of it, for example the action with \r\n`box._hide_action_on_transitions`.\r\n\r\n## Example\r\n\r\nSuppose we want to display the statechart in [tests/elevator.yaml](https://github.com/radioGiorgio/statechart-visualizer/blob/master/tests/elevator.yaml).\r\nFirst, we do :\r\n```\r\nimport svgwriter\r\nfrom sismic import io, model\r\nfrom structures.box_elements import RootBox\r\n\r\nwith open('tests/elevator.yaml', 'r') as stream:\r\n        statechart = io.import_from_yaml(stream)\r\n        assert isinstance(statechart, model.Statechart)\r\n\r\nbox = RootBox(statechart=statechart)\r\nsvgwriter.export(box, file_name='examples/Elevator')\r\n```\r\n\r\n![alt text](https://cdn.rawgit.com/radioGiorgio/statechart-visualizer/master/examples/Elevator_simple.svg)\r\n\r\nBut we want to have another arrangement of the boxes.\r\nSuppose that we want :\r\n- movingDown at north of doorsClosed\r\n- doorsClosed at north-east of doorsOpen\r\n- floorListener at south of movingElevator\r\n\r\nand we don't want to display the actions.\r\n\r\n```\r\nget = lambda x: box.get_box_by_name(x)\r\nbox.add_constraint(Constraint(get('moving'), 'north', get('doorsClosed')))\r\nbox.add_constraint(Constraint(get('doorsClosed'), 'north', get('doorsOpen')))\r\nbox.add_constraint(Constraint(get('doorsClosed'), 'east', get('doorsOpen')))\r\nbox.add_constraint(Constraint(get('floorListener'), 'south', get('movingElevator')))\r\nbox.hide_action_on_transitions()\r\nsvgwriter.export(box, file_name='examples/Elevator')\r\n```\r\n\r\n![alt text](https://cdn.rawgit.com/radioGiorgio/statechart-visualizer/master/examples/Elevator.svg)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}